{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/zoe/Mbed Programs/esp_code/mbed-os/features/frameworks/utest Directory Reference\par \pard\plain 
{\tc\tcl2 \v /home/zoe/Mbed Programs/esp_code/mbed-os/features/frameworks/utest Directory Reference}
{\xe \v /home/zoe/Mbed Programs/esp_code/mbed-os/features/frameworks/utest Directory Reference}
{\bkmkstart AAAAAADQQB}
{\bkmkend AAAAAADQQB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Directories\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b source}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b utest}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test harness allows you to execute a specified series of (asynchronous) C++ test cases with sensible default reporting and useful customization options.\par
Please note that this is a purposefully lean test harness, only dealing with test execution and providing default reporting handlers. It specifically does not support auto-discovery of test cases and does not provide you with test macros or other convenience functions. Instead, the macros in the {\f2 unity module} can be used for this purpose. However, you are not required to use these, and can use your own macros if you wish.\par
Furthermore, test failure recovery through the use of exceptions or {\f2 longjmp}  is not supported; the test will either continue and ignore failures or die by busy-waiting.\par
{\bkmkstart AAAAAADQQC}
{\bkmkend AAAAAADQQC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Theory of Operation
\par}
{\tc\tcl3 \v Theory of Operation}
A test specification contains a setup handler, several test cases and a teardown handler. Each test case contains a textual description, setup, teardown and failure handler as well as the actual test handler.\par
The order of handler execution is:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} setup handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab For each test case:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab {\b Test} case setup handler.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab {\b Test} case execution handler.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab (wait for timeout or callback validation in case of an asynchronous test case.)\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab (repeat test case execution handler if specified.)\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab {\b Test} case teardown handler.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} teardown handler.\par}
\par
\par}
{\bkmkstart AAAAAADQQD}
{\bkmkend AAAAAADQQD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Example
\par}
{\tc\tcl3 \v Example}
The following example showcases a lot of functionality and proper integration with the {\f2 Greentea test tool}, while making use of the {\f2 unity test macros}:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "mbed.h"}\par
{\cf21 #include "greentea-client/test_env.h"}\par
{\cf21 #include "utest/utest.h"}\par
{\cf21 #include "unity/unity.h"}\par
\par
{\cf17 using namespace }utest::v1;\par
\par
{\cf18 void} test_simple() \{\par
    TEST_ASSERT_EQUAL(0, 0);\par
    printf({\cf22 "Simple test called\\n"});\par
\}\par
\par
status_t test_repeats_setup({\cf17 const} Case *{\cf17 const} source, {\cf17 const} {\cf18 size_t} index_of_case) \{\par
    {\cf20 // Call the default handler for proper reporting}\par
    status_t status = greentea_case_setup_handler(source, index_of_case);\par
    printf({\cf22 "Setting up for '%s'\\n"}, source->get_description());\par
    {\cf19 return} status;\par
\}\par
\par
control_t test_repeats({\cf17 const} {\cf18 size_t} call_count) \{\par
    printf({\cf22 "Called for the %u. time\\n"}, call_count);\par
    TEST_ASSERT_NOT_EQUAL(3, call_count);\par
    {\cf20 // Specify how often this test is repeated ie. n total calls}\par
    {\cf19 return} (call_count < 2) ? CaseRepeatAll : CaseNext;\par
\}\par
\par
{\cf18 void} test_callback_validate() \{\par
    {\cf20 // You may also use assertions here!}\par
    TEST_ASSERT_EQUAL_PTR(0, 0);\par
    {\cf20 // Validate the callback}\par
    Harness::validate_callback();\par
\}\par
\par
control_t test_asynchronous() \{\par
    TEST_ASSERT_TRUE_MESSAGE({\cf17 true}, {\cf22 "(true == false) o_O"});\par
    {\cf20 // Set up a callback in the future. This may also be an interrupt!}\par
    EventQueue *queue = mbed_event_queue();\par
    queue->call_in(100, test_callback_validate);\par
    {\cf20 // Set a 200ms timeout starting from now}\par
    {\cf19 return} CaseTimeout(200);\par
\}\par
\par
control_t test_asynchronous_timeout({\cf17 const} {\cf18 size_t} call_count) \{\par
    TEST_ASSERT_TRUE_MESSAGE({\cf17 true}, {\cf22 "(true == false) o_O"});\par
    {\cf20 // Set a 200ms timeout starting from now,}\par
    {\cf20 // but automatically repeat only this handler on timeout.}\par
    {\cf19 if} (call_count >= 5) \{\par
        {\cf20 // but after the 5th call, the callback finally gets validated}\par
        EventQueue *queue = mbed_event_queue();\par
        queue->call_in(100, test_callback_validate);\par
    \}\par
    {\cf19 return} CaseRepeatHandlerOnTimeout(200);\par
\}\par
\par
{\cf20 // Custom setup handler required for proper Greentea support}\par
status_t greentea_setup({\cf17 const} {\cf18 size_t} number_of_cases) \{\par
    GREENTEA_SETUP(20, {\cf22 "default_auto"});\par
    {\cf20 // Call the default reporting function}\par
    {\cf19 return} greentea_test_setup_handler(number_of_cases);\par
\}\par
\par
{\cf20 // Specify all your test cases here}\par
Case cases[] = \{\par
    Case({\cf22 "Simple Test"}, test_simple),\par
    Case({\cf22 "Repeating Test"}, test_repeats_setup, test_repeats),\par
    Case({\cf22 "Asynchronous Test (200ms timeout)"}, test_asynchronous),\par
    Case({\cf22 "Asynchronous Timeout Repeat"}, test_asynchronous_timeout)\par
\};\par
\par
{\cf20 // Declare your test specification with a custom setup handler}\par
Specification specification(greentea_setup, cases);\par
\par
{\cf18 int} main()\par
\{   {\cf20 // Run the test specification}\par
    Harness::run(specification);\par
\}\par
}
\par
Running this test will output the following:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{\{timeout;20\}\}\par
\{\{host_test_name;default_auto\}\}\par
\{\{description;utest greentea example\}\}\par
\{\{test_id;MBED_OS\}\}\par
\{\{start\}\}\par
>>> Running 4 test cases...\par
\par
>>> Running case #1: 'Simple Test'...\par
Simple test called\par
>>> 'Simple Test': 1 passed, 0 failed\par
\par
>>> Running case #2: 'Repeating Test'...\par
Setting up for 'Repeating Test'\par
Called for the 1. time\par
>>> 'Repeating Test': 1 passed, 0 failed\par
\par
>>> Running case #2: 'Repeating Test'...\par
Setting up for 'Repeating Test'\par
Called for the 2. time\par
>>> 'Repeating Test': 2 passed, 0 failed\par
\par
>>> Running case #3: 'Asynchronous Test (200ms timeout)'...\par
>>> 'Asynchronous Test (200ms timeout)': 1 passed, 0 failed\par
\par
>>> Running case #4: 'Asynchronous Timeout Repeat'...\par
>>> failure with reason 'Ignored: Timed Out'\par
>>> failure with reason 'Ignored: Timed Out'\par
>>> failure with reason 'Ignored: Timed Out'\par
>>> failure with reason 'Ignored: Timed Out'\par
>>> failure with reason 'Ignored: Timed Out'\par
>>> 'Asynchronous Timeout Repeat': 1 passed, 0 failed\par
\par
>>> Test cases: 4 passed, 0 failed\par
\{\{success\}\}\par
\{\{end\}\}\par
}
\par}
{\bkmkstart AAAAAADQQE}
{\bkmkend AAAAAADQQE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description
\par}
{\tc\tcl3 \v Detailed Description}
{\bkmkstart AAAAAADQQF}
{\bkmkend AAAAAADQQF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Handlers
\par}
{\tc\tcl4 \v Handlers}
There are five handler types you can, but do not have to, override to customize operation. Please see the {\f2 utest/types.h}  file for a detailed description.\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 status_t test_setup_handler_t(const size_t number_of_cases)} : called before execution of any test case.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 void test_teardown_handler_t(const size_t passed, const size_t failed, const failure_t failure)} : called after execution of all test cases, and if testing is aborted.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 void test_failure_handler_t(const failure_t failure)} : called whenever a failure occurs anywhere in the specification.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 status_t case_setup_handler_t(const Case *const source, const size_t index_of_case)} : called before execution of each test case.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 status_t case_teardown_handler_t(const Case *const source, const size_t passed, const size_t failed, const failure_t reason)} : called after execution of each test case, and if testing is aborted.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 status_t case_failure_handler_t(const Case *const source, const failure_t reason)} : called whenever a failure occurs during the execution of a test case.\par}
\par
All handlers are defaulted for integration with the {\f2 Greentea testing tool}.\par}
{\bkmkstart AAAAAADQQG}
{\bkmkend AAAAAADQQG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Test Case Handlers
\par}
{\tc\tcl4 \v Test Case Handlers}
There are three test case handlers:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 void case_handler_t(void)} : executes once, if the case setup succeeded.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 control_t case_control_handler_t(void)} : executes (asynchronously) as many times as you specify, if the case setup succeeded.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 control_t case_call_count_handler_t(const size_t call_count)} : executes (asynchronously) as many times as you specify, if the case setup succeeded.\par}
\par
To specify a test case you must wrap it into a {\f2 {\b Case}}  class: {\f2 {\b Case}("mandatory description", case_handler)} . You may override the setup, teardown and failure handlers in this wrapper class as well. The {\f2 {\b Case}}  constructor is overloaded to allow you a comfortable declaration of all your callbacks and the order of arguments is:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Description (required).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Setup handler (optional).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} case handler (required).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Teardown handler (optional).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Failure handler (optional).\par}
\par
{\bkmkstart AAAAAADQQH}
{\bkmkend AAAAAADQQH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Test Case Attributes
\par}
{\tc\tcl4 \v Test Case Attributes}
You can modify test case behavior by returning {\f2 control_t}  modifiers:\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseNext} : never repeats and immediately moves to next test case\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseNoRepeat} : never repeats.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseRepeatAll} : repeats test case {\b with}  setup and teardown handlers.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseRepeatHandler} : repeats test case {\b without}  set and teardown handlers.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseNoTimeout} : immediately moves to next test case.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseAwait} : waits indefinitely for callback validation ({\i use with caution} ).\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseTimeout(uint32_t ms)} : waits for callback validation for {\f2 ms}  milliseconds, times out after that (fails with {\f2 REASON_TIMEOUT} ).\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseRepeatAllOnTimeout(uint32_t ms)} : waits for callback validation for {\f2 ms}  milliseconds, repeats test case {\b with}  setup and teardown handlers on time out.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseRepeatHandlerOnTimeout(uint32_t ms)} : waits for callback validation for {\f2 ms}  milliseconds, repeats test case {\b without}  setup and teardown handlers on time out.\par}
\par
Returning {\f2 CaseRepeatAll}  from your test case handler tells the test harness to repeat the test handler. You can use the {\f2 call_count}  (starts counting at 1) to decide when to stop. By default the setup and teardown handlers are called on every repeated test cases, however, you may only repeat the case handler by returning {\f2 CaseRepeatHandler} . To stop the harness from repeating the test case, return {\f2 CaseNext} .\par
For asynchronous test cases, you must return a {\f2 CaseTimeout(uint32_t ms)} . If you want to automatically repeat the test case on a timeout, use {\f2 CaseRepeatAllOnTimeout(uint32_t ms)}  and {\f2 CaseRepeatHandlerOnTimeout(uint32_t ms)} .\par
To validate your callback, you must call {\f2 Harness::validate_callback()}  in your asynchronous callback before the timeout fires. This will schedule the execution of the next test case.\par
For repeating asynchronous cases, you can "add" both attributes together: {\f2 CaseTimeout(200) + CaseRepeatAll}  will wait for 200ms for the callback validation and then repeat the test case. See the section on arbitration logic for more details.\par
Note that you can also add attributes during callback validation, however, only repeat attributes are considered. This allows you to return {\f2 CaseTimeout(500)}  to wait up to 500ms for the callback validation and delegate the decision to repeat to the time the callback occurs: {\f2 Harness::validate_callback(CaseRepeatHandler)} .\par
Keep in mind that you can only validate a callback once. If you need to wait for several callbacks, you need to write your own helper function that validates the expected callback only when all your custom callbacks arrive. This custom functionality is purposefully not part of this test harness, you can achieve it externally with additional code.\par}
\par}
{\bkmkstart AAAAAADQQI}
{\bkmkend AAAAAADQQI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Failure Handlers
\par}
{\tc\tcl4 \v Failure Handlers}
A failure may occur during any phase of the test. The appropriate failure handler is then called with {\f2 failure_t} , which contains the failure reason and location.\par
The failure reasons are:\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_NONE} : No failure occurred\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_UNKNOWN} : An unknown failure occurred\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_CASES} : A failure occurred in at least one test case\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_EMPTY_CASE} : The test case contains only empty handlers\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_TIMEOUT} : An expected asynchronous call timed out\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_ASSERTION} : An assertion failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_TEST_SETUP} : {\b Test} setup failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_TEST_TEARDOWN} : {\b Test} teardown failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_CASE_SETUP} : {\b Case} setup failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_CASE_HANDLER} : {\b Case} handler failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_CASE_TEARDOWN} : {\b Case} teardown failed\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_CASE_INDEX} : {\b Case} index returned from test setup or case teardown handler is invalid\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 REASON_SCHEDULER} : Underlying scheduler is not asynchronous\par}
\par
The failure locations are:\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_NONE} : No location information\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_UNKNOWN} : A failure occurred in an unknown location\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_TEST_SETUP} : A failure occurred in the test setup\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_TEST_TEARDOWN} : A failure occurred in the test teardown\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_CASE_SETUP} : A failure occurred in the case setup\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_CASE_HANDLER} : A failure occurred in the case handler\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LOCATION_CASE_TEARDOWN} : A failure occurred in the case teardown\par}
\par
If the setup or teardown handlers fail, they may return a {\f2 STATUS_ABORT}  code, which will call the failure handler with the appropriate failure reason ({\f2 REASON_CASE_\{SETUP|TEARDOWN\}} ) and failure location ({\f2 LOCATION_CASE_\{SETUP|TEARDOWN\}} ). If the setup handler fails, the test case is never executed. Instead, the teardown handler is called in an attempt to salvage the situation. Please note that if a teardown handler fails, the system can be considered too unstable to continue testing.\par
You may also raise a failure manually by calling {\f2 Harness::raise_failure(failure_reason_t reason)} . In fact, this is how you can integrate assertion failures from custom test macros, as done with the unity macros, which raise a failure with the {\f2 REASON_ASSERTION}  reason.\par
When waiting for an asynchronous callback, if the timeout fires, {\f2 REASON_TIMEOUT}  is raised.\par
The failure handler decides whether to continue or abort testing by returning {\f2 STATUS_CONTINUE}  or {\f2 STATUS_ABORT}  respectively. You can also ignore any raised failure by returning {\f2 STATUS_IGNORE}  and the harness will then not count this failure. In case of an abort, the test harness dies by busy waiting in a forever loop. This is needed because we cannot unwind the stack without exception support, and the asynchronous nature of the test harness breaks with using {\f2 longjmp} s.\par
Note that when {\f2 REASON_IGNORE}  is {\f2 OR} ed into the failure reason, the failure handler is expected to return {\f2 STATUS_IGNORE} . This is done automatically for test cases repeating after a timeout, and the default failure handlers also report this failure, but tell the harness to ignore it. Furthermore, the unity macros may decide to ignore assertion failures as well, in which case the assertion is ignored intentionally.\par}
{\bkmkstart AAAAAADQQJ}
{\bkmkend AAAAAADQQJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Default Handlers
\par}
{\tc\tcl4 \v Default Handlers}
Three sets of default handlers with different behaviors are provided for your convenience:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 greentea_abort_handlers}  (default): Greentea-style reporting, aborts on the first failure, but requires custom test setup handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 greentea_continue_handlers} : Greentea-style reporting, always continues testing, but requires custom test setup handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 verbose_continue_handlers} : always continues testing and reporting, except when a teardown failed.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 selftest_handlers} : Greentea-style reporting, but aborts on the first assertion failure raised. This allows the use of unity macros for self testing without recursive failure handler calls.\par}
\par
These default handlers are called when you have not overridden a custom handler, and they only contain reporting functionality and do not modify global state.\par
You can specify which default handlers you want to use when wrapping your test cases in the {\f2 Specification}  class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Declare your test specification with a custom setup handler}\par
{\cf20 // and set the default handlers to the predefined “greentea continue” behavior}\par
Specification specification(greentea_setup, cases, greentea_continue_handlers);\par
}
\par}
{\bkmkstart AAAAAADQQK}
{\bkmkend AAAAAADQQK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Custom Handlers
\par}
{\tc\tcl4 \v Custom Handlers}
You may override any of the default handlers with your own custom handler.\par
To ignore a handler completely and not call a custom or default handler, you may use the {\f2 ignore_handler}  hint. To explicitly invoke the default handler, use the {\f2 default_handler}  hint.\par
To use your own custom handler, provide a function with the correct signature for the handler that you want to customize and provide it in your test case wrapper or specification wrapper. To turn a {\f2 failure_t}  into a meaningful string use the {\f2 stringify(failure_t)}  method.\par
{\b We strongly recommend that you call the predefined {\f2 greentea_*}  handlers inside your custom callback, as they report the current condition in a properly formatted fashion.}  By calling these handlers inside your custom callback your unit test does not need to be modified if the test logging needs to be changed in the future.\par
For the {\f2 Specification}  class the order of arguments is:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} setup handler (optional).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Array of test cases (required).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} teardown handler (optional).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Test} failure handler (optional).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Default handlers (optional).\par}
\par
\par}
{\bkmkstart AAAAAADQQL}
{\bkmkend AAAAAADQQL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Test Case Attribute Arbitration
\par}
{\tc\tcl4 \v Test Case Attribute Arbitration}
When adding conflicting modifiers together\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
the more restrictive (=shorter) timeout is chosen, but {\f2 CaseNoTimeout}  always wins arbitration: {\f2 CaseNoTimeout}  > {\f2 CaseTimeout(100)}  > {\f2 CaseTimeout(200)}  > {\f2 CaseAwait} .\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
the more invasive repeat method is chosen, but {\f2 CaseNoRepeat}  always wins arbitration: {\f2 CaseNoRepeat}  > {\f2 CaseRepeatAll} /{\f2 CaseRepeatAllOnTimeout(ms)}  > {\f2 CaseRepeatHandler} /{\f2 CaseRepeatHandlerOnTimeout(ms)} .\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 CaseNext}  always wins arbitration.\par}
\par
The following table shows this arbitration logic in detail:\par
| + | {\f2 CaseNext}  | {\f2 CaseNoRepeat}  | {\f2 CaseRepeatAll}  | {\f2 CaseRepeatHandler}  | {\f2 CaseNoTimeout}  | {\f2 CaseAwait}  | {\f2 CaseTimeout(aa)}  | {\f2 CaseRepeatAllOnTimeout(aa)}  | {\f2 CaseRepeatHandlerOnTimeout(aa)}  |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| | {\f2 CaseNext}  | no repeat &\par
 no timeout | {\f2 CaseNoRepeat}  | no repeat &\par
 no timeout | no repeat | {\f2 CaseRepeatAll}  | no repeat &\par
 no timeout | no repeat | repeat all | {\f2 CaseRepeatHandler}  | no repeat &\par
 no timeout | no repeat | repeat all | repeat handler | {\f2 CaseNoTimeout}  | no repeat &\par
 no timeout | no repeat &\par
 no timeout | repeat all &\par
 no timeout | repeat handler &\par
 no timeout | no timeout | {\f2 CaseAwait}  | no repeat &\par
 no timeout | no repeat &\par
 infinite timeout | repeat all &\par
 infinite timeout | repeat handler &\par
 infinite timeout | no timeout | infinite timeout | {\f2 CaseTimeout(bb)}  | no repeat &\par
 no timeout | no repeat &\par
 {\f2 bb} ms timeout | repeat all &\par
 {\f2 bb} ms timeout | repeat handler &\par
 {\f2 bb} ms timeout | no timeout | {\f2 bb} ms timeout | {\f2 min(aa,bb)} ms timeout | {\f2 CaseRepeatAllOnTimeout(bb)}  | no repeat &\par
 no timeout | no repeat &\par
 {\f2 bb} ms timeout | repeat all on validate & repeat all on {\f2 bb} ms timeout | repeat all on validate & repeat all on {\f2 bb} ms timeout | repeat all & no timeout | repeat all on {\f2 bb} ms timeout | repeat all on {\f2 min(aa,bb)} ms timeout | repeat all on {\f2 min(aa,bb)} ms timeout | | {\f2 CaseRepeatHandlerOnTimeout(bb)}  | no repeat &\par
 no timeout | no repeat &\par
 {\f2 bb} ms timeout | repeat all on validate & repeat all on {\f2 bb} ms timeout | repeat handler on validate & repeat handler on {\f2 bb} ms timeout | repeat handler & no timeout | repeat handler on {\f2 bb} ms timeout | repeat handler on {\f2 min(aa,bb)} ms timeout | repeat all on {\f2 min(aa,bb)} ms timeout | repeat handler on {\f2 min(aa,bb)} ms timeout\par}
{\bkmkstart AAAAAADQQM}
{\bkmkend AAAAAADQQM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atomicity
\par}
{\tc\tcl4 \v Atomicity}
All handlers execute with interrupts enabled, {\b except the case failure handler!} . This means you can write test cases that poll for interrupts to be completed inside any handler, except the failure handler.\par
If you setup an interrupt that validates its callback using {\f2 Harness::validate_callback()}  inside a test case and it fires before the test case completed, the validation will be buffered. If the test case then returns a timeout value, but the callback is already validated, the test harness just continues normally.\par}
{\bkmkstart AAAAAADQQN}
{\bkmkend AAAAAADQQN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Custom Scheduler
\par}
{\tc\tcl4 \v Custom Scheduler}
By default, a {\b Timeout} object is used for scheduling the harness operations. In case this is not available you can provide your own custom scheduler implementation and make the harness use it with the {\f2 Harness::set_scheduler(your_custom_implementation)}  function.\par
The scheduler requirements are very simple: Execute a {\f2 void(void)}  function in you main loop (with a delay of {\i N}  ms). Only one function is scheduled by the harness {\i at any given time} . Note that you do not need to implement the delay functionality, if your tests do not require timeouts. You will still be able to use repeating test cases, but an error is thrown if your tests attempt to use a timeout, when your underlying scheduler does not support it.\par
There are two functions you need to implement:\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 void* post_callback(const utest_v1_harness_callback_t callback, const uint32_t delay_ms)} : schedules a {\f2 void(void)}  callback function in {\i N}  ms.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 int32_t cancel_callback_t(void *handle)} : cancels an asynchronous callback.\par}
\par
Please see {\f2 their doxygen documentation for implementation details}.\par}
{\bkmkstart AAAAAADQQO}
{\bkmkend AAAAAADQQO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Example Synchronous Scheduler
\par}
{\tc\tcl4 \v Example Synchronous Scheduler}
Here is the most {\f2 basic scheduler implementation without any asynchronous support}. Note that this does not require any hardware support at all, but you cannot use timeouts in your test cases! {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 volatile} utest_v1_harness_callback_t minimal_callback;\par
\par
{\cf17 static} {\cf18 void}* utest_minimal_post({\cf17 const} utest_v1_harness_callback_t callback, {\cf17 const} uint32_t delay_ms) \{\par
    minimal_callback = callback;\par
    {\cf20 // this scheduler does not support asynchronous callbacks}\par
    {\cf19 return} (delay_ms ? NULL : ({\cf18 void}*)1);\par
\}\par
{\cf17 static} int32_t utest_minimal_cancel({\cf18 void}*) \{\par
    {\cf19 return} -1;  {\cf20 // canceling not supported either}\par
\}\par
{\cf17 static} {\cf17 const} utest_v1_scheduler_t utest_minimal_scheduler = \{utest_minimal_post, utest_minimal_cancel\};\par
\par
{\cf20 // [...] Add your test cases and specification here.}\par
\par
{\cf18 void} main() {\cf20 // or whatever your custom entry point is}\par
\{\par
    {\cf20 // You MUST set the custom scheduler before running the specification.}\par
    Harness::set_scheduler(utest_minimal_scheduler);\par
    Harness::run(specification);\par
\par
    {\cf19 while}(1) \{\par
        {\cf19 if} (minimal_callback) \{\par
            {\cf20 // copy the callback and reset the shared memory}\par
            utest_v1_harness_callback_t callback = minimal_callback;\par
            minimal_callback = NULL;\par
            callback(); {\cf20 // execute the copied callback}\par
        \}\par
    \}\par
\}\par
}
\par}
{\bkmkstart AAAAAADQQP}
{\bkmkend AAAAAADQQP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Example Asynchronous Scheduler
\par}
{\tc\tcl4 \v Example Asynchronous Scheduler}
Here is the a {\f2 complete scheduler implementation with any asynchronous support}. Note that this does require at least a hardware timer, in this case we have used {\f2 mbed-hal/us_ticker} ! Note that you must not execute the callback in the timer interrupt context, but in the main loop context! {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 volatile} utest_v1_harness_callback_t minimal_callback;\par
{\cf17 volatile} utest_v1_harness_callback_t ticker_callback;\par
{\cf17 const} ticker_data_t *ticker_data;\par
ticker_event_t ticker_event;\par
\par
{\cf17 static} {\cf18 void} ticker_handler(uint32_t) \{\par
    minimal_callback = ticker_callback; {\cf20 // interrupt context!}\par
\}\par
{\cf17 static} {\cf18 void}* utest_minimal_post({\cf17 const} utest_v1_harness_callback_t callback, {\cf17 const} uint32_t delay_ms) \{\par
    {\cf19 if} (delay_ms) \{\par
        ticker_callback = callback;\par
        ticker_insert_event(ticker_data, &ticker_event, ticker_read(ticker_data) + delay_ms * 1000, 0);\par
    \}\par
    {\cf19 else} minimal_callback = callback;\par
    {\cf19 return} ({\cf18 void}*)1;\par
\}\par
{\cf17 static} int32_t utest_minimal_cancel({\cf18 void}*) \{\par
    ticker_remove_event(ticker_data, &ticker_event);\par
    {\cf19 return} 0;   {\cf20 // canceling is supported}\par
\}\par
{\cf17 static} {\cf17 const} utest_v1_scheduler_t utest_minimal_scheduler = \{utest_minimal_post, utest_minimal_cancel\};\par
\par
{\cf20 // [...] Add your test cases and specification here.}\par
\par
{\cf18 void} main() {\cf20 // or whatever your custom entry point is}\par
\{\par
    ticker_data = get_us_ticker_data(); {\cf20 // initialize the ticker data.}\par
    ticker_set_handler(ticker_data, ticker_handler);\par
    {\cf20 // You MUST set the custom scheduler before running the specification.}\par
    Harness::set_scheduler(utest_minimal_scheduler);\par
    Harness::run(specification);\par
\par
    {\cf19 while}(1) \{\par
        {\cf19 if} (minimal_callback) \{\par
            {\cf20 // copy the callback and reset the shared memory}\par
            utest_v1_harness_callback_t callback = minimal_callback;\par
            minimal_callback = NULL;\par
            callback(); {\cf20 // execute the copied callback}\par
        \}\par
    \}\par
\}\par
}
 \par}
\par}
}}