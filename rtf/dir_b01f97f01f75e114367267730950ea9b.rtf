{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
/home/zoe/Mbed Programs/esp_code/mbed-os/connectivity/netsocket/tests/TESTS/netsocket Directory Reference\par \pard\plain 
{\tc\tcl2 \v /home/zoe/Mbed Programs/esp_code/mbed-os/connectivity/netsocket/tests/TESTS/netsocket Directory Reference}
{\xe \v /home/zoe/Mbed Programs/esp_code/mbed-os/connectivity/netsocket/tests/TESTS/netsocket Directory Reference}
{\bkmkstart AAAAAADQJV}
{\bkmkend AAAAAADQJV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Directories\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b dns}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b nidd}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b tcp}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b tls}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
directory {\b udp}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Files\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
file {\b test_params.h}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is a test plan for the Mbed OS {\b Socket} API. This describes all test cases and their intended behaviors. When an API document is not clear, use this as a reference for implementing correct behavior.\par
{\b NOTE:}  Because testing is a moving target, this test plan might define more test cases than Mbed OS implements. Refer to test case priorities for a list of test cases that the target must pass to be compliant with the Mbed OS socket API.\par
{\bkmkstart AAAAAADQJW}
{\bkmkend AAAAAADQJW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Target API
\par}
{\tc\tcl3 \v Target API}
The target for this plan is to test:\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 Socket}.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 UDPSocket}.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 TCPSocket}.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 TLSSocket}.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 DNS}.\par}
\par
Please see the {\f2 Network Socket documentation} for reference.\par}
{\bkmkstart AAAAAADQJX}
{\bkmkend AAAAAADQJX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tools to use
\par}
{\tc\tcl3 \v Tools to use}
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Mbed OS.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Standard Mbed OS development tools as described in the {\f2 Mbed OS tools overview}.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\b Test} server.\par}
\par
These test cases themselves do not require any special tooling, other than the test server described in "Test environment" chapter.\par}
{\bkmkstart AAAAAADQJY}
{\bkmkend AAAAAADQJY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test environment
\par}
{\tc\tcl3 \v Test environment}
As a general guideline, network connectivity with public Internet access is required. This satisfies {\b Socket} tests, but specific connectivity methods might require some extra configuration or devices within the network.\par
The test environment consist of DUTs, network connection and the test server. Arm provides a public test server, but it can be installed locally as well, if an isolated test environment is required.\par
{\bkmkstart AAAAAADQJZ}
{\bkmkend AAAAAADQJZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public test server
\par}
{\tc\tcl4 \v Public test server}
Address: {\f2 echo.mbedcloudtesting.com} .\par
Both IPv4 and IPv6 addresses are available from a public {\b DNS} service:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ host echo.mbedcloudtesting.com\par
echo.mbedcloudtesting.com has address 52.215.34.155\par
echo.mbedcloudtesting.com has IPv6 address 2a05:d018:21f:3800:8584:60f8:bc9f:e614\par
}
\par
{\b Open services in the test server} \par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Echo protocol, {\f2 RFC 862} is enabled on both TCP and UDP on port 7. {\b Port} 2007 for TLS\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Discard protocol, {\f2 RFC 863} is enabled in both TCP and UDP on port 9. {\b Port} 2009 for TLS.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Character generator protocol, {\f2 RFC 864} is enabled in both TCP and UDP on port 19. {\b Port} 2019 for TLS. The output pattern follows the proposed example pattern in RFC.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Daytime protocol, {\f2 RFC 867} in both TCP and UDP on port 13. {\b Port} 2013 for TLS.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Time protocol, {\f2 RFC 868} in both TCP and UDP on port 37.\par}
\par
Configure the firewall to allow this traffic to access the test server.\par
{\b Example configuration for Debian/Ubuntu Linux} \par
These services are available on many operating systems, and installing them is out of scope of this document. Below is an example of how to install these services into a Debian/Ubuntu based Linux distribution using standard Inet Daemon:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ sudo apt install inetutils-inetd\par
$ nano /etc/inetd.conf\par
}
\par
Enable following services from /etc/inetd.conf:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #:INTERNAL: Internal services\par
discard     stream  tcp6    nowait  root    internal\par
discard     dgram   udp6    wait    root    internal\par
echo        stream  tcp6    nowait  root    internal\par
echo        dgram   udp6    wait    root    internal\par
chargen     stream  tcp6    nowait  root    internal\par
chargen     dgram   udp6    wait    root    internal\par
daytime     stream  tcp6    nowait  root    internal\par
time        stream  tcp6    nowait  root    internal\par
}
\par
Below is an example of how to install these services in TLS version into a Debian/Ubuntu based Linux distribution using Stunnel4 Daemon:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ sudo apt install stunnel4\par
$ nano /etc/stunnel/stunnel.conf\par
}
\par
Enable following services from /etc/inetd.conf:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ; **************************************************************************\par
; * Service definitions (remove all services for inetd mode)               *\par
; **************************************************************************\par
\par
[echo]\par
accept  = :::2007\par
connect = 7\par
cert = /etc/letsencrypt/live/<test_server_url>/fullchain.pem\par
key = /etc/letsencrypt/live/<test_server_url>/privkey.pem\par
\par
[discard]\par
accept  = :::2009\par
connect = 9\par
cert = /etc/letsencrypt/live/<test_server_url>/fullchain.pem\par
key = /etc/letsencrypt/live/<test_server_url>/privkey.pem\par
\par
[daytime]\par
accept  = :::2013\par
connect = 13\par
cert =/etc/letsencrypt/live/<test_server_url>/fullchain.pem\par
key = /etc/letsencrypt/live/<test_server_url>/privkey.pem\par
\par
[chargen]\par
accept  = :::2019\par
connect = 19\par
cert = /etc/letsencrypt/live/<test_server_url>/fullchain.pem\par
key = /etc/letsencrypt/live/<test_server_url>/privkey.pem\par
}
\par
Get, update and install certificate files by certbot (Provided by Let's Encrypt {\f2 https://letsencrypt.org/}).\par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Install lighthttpd server:\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ sudo apt-get install lighttpd\par
$ sudo rm -rf /var/www/html/*\par
$ sudo echo "<html><body><h1>Empty</h1>" > /var/www/html/index.html\par
$ sudo echo "</body></html>" >> /var/www/html/index.html\par
$ sudo chown www-data:www-data /var/www/html/index.html\par
$ sudo systemctl restart lighttpd.service\par
}
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Install and set up certbot:\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ sudo apt-get update\par
$ sudo apt-get install software-properties-common\par
$ sudo add-apt-repository ppa:certbot/certbot\par
$ sudo apt-get update\par
$ sudo apt-get install certbot\par
$ sudo certbot certonly\par
$ sudo certbot certonly --webroot -w /var/www/html -d <test_server_url>\par
}
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Set test server to renew certificate before expiry.\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ sudo echo "SHELL=/bin/sh" > /etc/cron.d/certbot\par
$ sudo echo "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin" > /etc/cron.d/certbot\par
$ sudo echo "0 */12 * * * root test -x /usr/bin/certbot -a \\! -d /run/systemd/system && perl -e 'sleep int(rand(43200))' && certbot -q renew" > /etc/cron.d/certbot\par
}
\par}
\par
Where <test_server_url> is the test server URL.\par
{\b Testing the connectivity} \par
You can connect to the test server with an NMAP tool:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ nmap -sT -p7,9,13,37,2007,2009,2013 echo.mbedcloudtesting.com\par
\par
Starting Nmap 7.01 ( https://nmap.org ) at 2019-01-07 16:45 CET\par
Nmap scan report for echo.mbedcloudtesting.com (52.215.34.155)\par
Host is up (0.027s latency).\par
Other addresses for echo.mbedcloudtesting.com (not scanned): 2a05:d018:21f:3800:3164:2a5c:75b3:970b\par
rDNS record for 52.215.34.155: ec2-52-215-34-155.eu-west-1.compute.amazonaws.com\par
PORT     STATE SERVICE\par
7/tcp    open  echo\par
9/tcp    open  discard\par
13/tcp   open  daytime\par
37/tcp   open  time\par
2007/tcp open  dectalk\par
2009/tcp open  news\par
2013/tcp open  raid-am\par
\par
Nmap done: 1 IP address (1 host up) scanned in 0.10 seconds\par
\par
$ sudo nmap -sU -p7,9,13,37,2007,2009,2013 echo.mbedcloudtesting.com\par
\par
Starting Nmap 7.01 ( https://nmap.org ) at 2019-01-08 15:05 CET\par
Nmap scan report for echo.mbedcloudtesting.com (52.215.34.155)\par
Host is up (0.044s latency).\par
Other addresses for echo.mbedcloudtesting.com (not scanned): 2a05:d018:21f:3800:3164:2a5c:75b3:970b\par
rDNS record for 52.215.34.155: ec2-52-215-34-155.eu-west-1.compute.amazonaws.com\par
PORT     STATE         SERVICE\par
7/udp    open          echo\par
9/udp    open|filtered discard\par
13/udp   closed        daytime\par
37/udp   closed        time\par
2007/udp closed        raid-am\par
2009/udp closed        whosockami\par
2013/udp closed        raid-cd\par
\par
Nmap done: 1 IP address (1 host up) scanned in 1.78 seconds\par
}
\par}
{\bkmkstart AAAAAADQKA}
{\bkmkend AAAAAADQKA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ethernet test environment
\par}
{\tc\tcl4 \v Ethernet test environment}
The Ethernet test environment consists of devices, an Ethernet switch and an optional firewall that allows connecting to the Echo server.\par}
{\bkmkstart AAAAAADQKB}
{\bkmkend AAAAAADQKB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Wi-Fi test environment
\par}
{\tc\tcl4 \v Wi-Fi test environment}
The Wi-Fi test environment is equivalent to the Ethernet test environment, except that the Wi-Fi test environment has two separate access points or one with dual SSID. Connectivity to echo server is required, but it can be hosted locally, as specified in the Ethernet environment.\par}
\par}
{\bkmkstart AAAAAADQKC}
{\bkmkend AAAAAADQKC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test case priorities
\par}
{\tc\tcl3 \v Test case priorities}
Please refer to the following table for priorities of test cases. Priorities are labeled as MUST and SHOULD. MUST means this is a requirement and therefore mandatory to pass the test. SHOULD means it is recommended to pass the test if the driver implements the feature in question.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\cell }{{\b Test} case   \cell }{Priority    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{1   \cell }{UDPSOCKET_OPEN_DESTRUCT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{2   \cell }{UDPSOCKET_OPEN_LIMIT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{3   \cell }{UDPSOCKET_OPEN_TWICE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{4   \cell }{UDPSOCKET_OPEN_CLOSE_REPEAT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{5   \cell }{UDPSOCKET_BIND_PORT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{6   \cell }{UDPSOCKET_BIND_PORT_FAIL   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{9   \cell }{UDPSOCKET_BIND_ADDRESS_INVALID   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{10   \cell }{UDPSOCKET_BIND_WRONG_TYPE   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{11   \cell }{UDPSOCKET_BIND_ADDRESS   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{12   \cell }{UDPSOCKET_BIND_UNOPENED   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{13   \cell }{UDPSOCKET_SENDTO_INVALID   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{14   \cell }{UDPSOCKET_SENDTO_REPEAT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{15   \cell }{UDPSOCKET_ECHOTEST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{16   \cell }{UDPSOCKET_ECHOTEST_NONBLOCK   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{17   \cell }{UDPSOCKET_RECV_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{18   \cell }{UDPSOCKET_SENDTO_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{19   \cell }{TCPSOCKET_OPEN_DESTRUCT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{20   \cell }{TCPSOCKET_OPEN_LIMIT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{21   \cell }{TCPSOCKET_OPEN_TWICE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{22   \cell }{TCPSOCKET_OPEN_CLOSE_REPEAT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{23   \cell }{TCPSOCKET_BIND_PORT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{24   \cell }{TCPSOCKET_BIND_PORT_FAIL   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{27   \cell }{TCPSOCKET_BIND_ADDRESS_INVALID   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{28   \cell }{TCPSOCKET_BIND_WRONG_TYPE   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{29   \cell }{TCPSOCKET_BIND_ADDRESS   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{30   \cell }{TCPSOCKET_BIND_UNOPENED   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{31   \cell }{TCPSOCKET_CONNECT_INVALID   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{32   \cell }{TCPSOCKET_SEND_REPEAT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{33   \cell }{TCPSOCKET_ECHOTEST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{34   \cell }{TCPSOCKET_ECHOTEST_NONBLOCK   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{35   \cell }{TCPSOCKET_RECV_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{36   \cell }{TCPSOCKET_SEND_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{37   \cell }{TCPSOCKET_ENDPOINT_CLOSE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{38   \cell }{UDPSOCKET_ECHOTEST_BURST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{39   \cell }{UDPSOCKET_ECHOTEST_BURST_NONBLOCK   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{40   \cell }{TCPSOCKET_ECHOTEST_BURST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{41   \cell }{TCPSOCKET_ECHOTEST_BURST_NONBLOCK   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{42   \cell }{TCPSOCKET_RECV_100K   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{43   \cell }{TCPSOCKET_RECV_100K_NONBLOCK   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{44   \cell }{TCPSOCKET_THREAD_PER_SOCKET_SAFETY   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{45   \cell }{TCPSOCKET_SETSOCKOPT_KEEPALIVE_VALID   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{46   \cell }{TLSSOCKET_OPEN_DESTRUCT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{47   \cell }{TLSSOCKET_OPEN_LIMIT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{48   \cell }{TLSSOCKET_OPEN_TWICE   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{49   \cell }{TLSSOCKET_CONNECT_INVALID   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{50   \cell }{TLSSOCKET_HANDSHAKE_INVALID   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{51   \cell }{TLSSOCKET_SEND_CLOSED   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{52   \cell }{TLSSOCKET_SEND_UNCONNECTED   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{53   \cell }{TLSSOCKET_SEND_REPEAT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{54   \cell }{TLSSOCKET_SEND_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{55   \cell }{TLSSOCKET_ECHOTEST   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{56   \cell }{TLSSOCKET_ECHOTEST_NONBLOCK   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{57   \cell }{TLSSOCKET_ENDPOINT_CLOSE   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{58   \cell }{TLSSOCKET_NO_CERT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{59   \cell }{TLSSOCKET_RECV_TIMEOUT   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{60   \cell }{TLSSOCKET_SIMULTANEOUS_TEST   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{61   \cell }{TLSSOCKET_ECHOTEST_BURST   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{62   \cell }{TLSSOCKET_ECHOTEST_BURST_NONBLOCK   \cell }{SHOULD    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{63   \cell }{ASYNCHRONOUS_DNS   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{64   \cell }{ASYNCHRONOUS_DNS_CACHE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{65   \cell }{ASYNCHRONOUS_DNS_CANCEL   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{66   \cell }{ASYNCHRONOUS_DNS_EXTERNAL_EVENT_QUEUE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{67   \cell }{ASYNCHRONOUS_DNS_INVALID_HOST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{68   \cell }{ASYNCHRONOUS_DNS_NON_ASYNC_AND_ASYNC   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{69   \cell }{ASYNCHRONOUS_DNS_SIMULTANEOUS_CACHE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{70   \cell }{ASYNCHRONOUS_DNS_SIMULTANEOUS_REPEAT   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{71   \cell }{ASYNCHRONOUS_DNS_SIMULTANEOUS   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{72   \cell }{ASYNCHRONOUS_DNS_TIMEOUTS   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{73   \cell }{SYNCHRONOUS_DNS   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{74   \cell }{SYNCHRONOUS_DNS_CACHE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{75   \cell }{SYNCHRONOUS_DNS_INVALID_HOST   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{76   \cell }{SYNCHRONOUS_DNS_MULTIPLE   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{77   \cell }{UDPSOCKET_ECHOTEST_CONNECT_SEND_RECV   \cell }{MUST    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{78   \cell }{UDPSOCKET_ECHOTEST_NONBLOCK_CONNECT_SEND_RECV   \cell }{MUST   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAADQKD}
{\bkmkend AAAAAADQKD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Building test binaries
\par}
{\tc\tcl3 \v Building test binaries}
To test the board and driver, test against the Mbed OS master branch to get the most recent, up-to-date test cases and drivers.\par
To create a build environment:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mbed new network_test\par
cd network_test\par
cd mbed-os\par
git checkout master\par
cd ..\par
}
\par
Also, building socket test cases requires a special macro to enable all tests, so create an {\f2 mbed_app.json}  file with the following content at minimum:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{\par
    "config": \{\par
        "echo-server-addr" : \{\par
            "help" : "IP address of echo server",\par
            "value" : "\\"echo.mbedcloudtesting.com\\""\par
        \},\par
        "echo-server-port" : \{\par
            "help" : "Port of echo server",\par
            "value" : "7"\par
        \},\par
        "echo-server-discard-port" : \{\par
            "help" : "Discard port of echo server",\par
            "value" : "9"\par
        \},\par
        "echo-server-port-tls" : \{\par
            "help" : "Echo port of echo server",\par
            "value" : "2007"\par
        \},\par
        "echo-server-discard-port-tls" : \{\par
            "help" : "Discard port of echo server",\par
            "value" : "2009"\par
        \}\par
    \}\par
\}\par
}
\par
Wi-Fi tests require some more configuration, so for Wi-Fi purposes, the {\f2 mbed_app.json}  might look like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{\par
    "config": \{\par
        "wifi-secure-ssid": \{\par
            "help": "WiFi SSID for WPA2 secured network",\par
            "value": "\\"test-network\\""\par
        \},\par
        "wifi-unsecure-ssid": \{\par
            "help": "WiFi SSID for unsecure netwrok",\par
            "value": "\\"unsecure-test-net\\""\par
        \},\par
        "wifi-password": \{\par
            "help": "WiFi Password",\par
            "value": "\\"password\\""\par
        \},\par
        "wifi-secure-protocol": \{\par
            "help": "WiFi security protocol, valid values are WEP, WPA, WPA2, WPA_WPA2",\par
            "value": "\\"WPA2\\""\par
        \},\par
        "wifi-ch-secure": \{\par
            "help": "Channel number of secure SSID",\par
            "value": 6\par
        \},\par
        "wifi-ch-unsecure": \{\par
            "help": "Channel number of unsecure SSID",\par
            "value": 6\par
        \},\par
        "ap-mac-secure": \{\par
            "help": "BSSID of secure AP in form of AA:BB:CC:DD:EE:FF",\par
            "value": "\\"58:8b:f3:99:f2:9c\\""\par
        \},\par
        "ap-mac-unsecure": \{\par
            "help": "BSSID of unsecure AP in form of \\"AA:BB:CC:DD:EE:FF\\"",\par
            "value": "\\"58:8b:f3:99:c2:08\\""\par
        \},\par
        "max-scan-size": \{\par
            "help": "How many networks may appear in Wifi scan result",\par
            "value": 30\par
        \},\par
        "echo-server-addr" : \{\par
            "help" : "IP address of echo server",\par
            "value" : "\\"echo.mbedcloudtesting.com\\""\par
        \},\par
        "echo-server-port" : \{\par
            "help" : "Port of echo server",\par
            "value" : "7"\par
        \},\par
        "echo-server-discard-port" : \{\par
            "help" : "Discard port of echo server",\par
            "value" : "9"\par
        \},\par
        "echo-server-port-tls" : \{\par
            "help" : "Port of echo server for TLS",\par
            "value" : "2007"\par
        \},\par
        "echo-server-discard-port-tls" : \{\par
            "help" : "Discard port of echo server for TLS",\par
            "value" : "2009"\par
        \}\par
    \},\par
    "target_overrides": \{\par
        "*": \{\par
            "target.network-default-interface-type": "WIFI",\par
            "nsapi.default-wifi-ssid": "\\"WIFI_SSID\\"",\par
            "nsapi.default-wifi-password": "\\"WIFI_PASSWORD\\"",\par
            "nsapi.default-wifi-security": "WPA_WPA2"\par
        \}\par
    \}\par
\}\par
}
\par
Cellular tests require some more configuration, so for cellular purposes, the {\f2 mbed_app.json}  might look like this: NOTE! These are just typical settings needed for cellular. Actual configuration values depend on used target HW, SIM, modem and network capabilities.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{\par
    "config": \{\par
        "echo-server-addr" : \{\par
            "help" : "IP address of echo server",\par
            "value" : "\\"echo.mbedcloudtesting.com\\""\par
        \},\par
        "echo-server-port" : \{\par
            "help" : "Port of echo server",\par
            "value" : "7"\par
        \},\par
        "echo-server-discard-port" : \{\par
            "help" : "Discard port of echo server",\par
            "value" : "9"\par
        \},\par
        "echo-server-port-tls" : \{\par
            "help" : "Port of echo server for TLS",\par
            "value" : "2007"\par
        \},\par
        "echo-server-discard-port-tls" : \{\par
            "help" : "Discard port of echo server for TLS",\par
            "value" : "2009"\par
        \}\par
    \},\par
    "target_overrides": \{\par
        "*": \{\par
            "target.network-default-interface-type": "CELLULAR",\par
            "nsapi.default-cellular-sim-pin": "\\"SIM PIN if needed\\"",\par
            "nsapi.default-cellular-plmn": "\\"PLMN if needed\\"",\par
            "nsapi.default-cellular-apn": "\\"APN if needed\\"",\par
            "nsapi.default-cellular-username": "\\"SIM USERNAME if needed\\"",\par
            "nsapi.default-cellular-password": "\\"SIM PASSWORD if needed\\"",\par
            "lwip.ipv4-enabled": true,\par
            "lwip.ipv6-enabled": true,\par
            "lwip.tcp-enabled": true,\par
            "lwip.ppp-enabled": true,\par
            "lwip.ethernet-enabled": false,\par
            "<YOUR MODEM TARGET>.provide-default": true,\par
            "cellular.radio-access-technology": <see supported values from cellular mbed_lib.json>\par
        \}\par
    \}\par
\}\par
}
\par
Please, see {\f2 mbed-os/tools/test_configs}  folder for examples for different technologies.\par
Now build the test binaries:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mbed test --compile -t <toolchain> -m <target> -n mbed-os-tests-network-*,mbed-os-tests-netsocket*\par
}
\par}
{\bkmkstart AAAAAADQKE}
{\bkmkend AAAAAADQKE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Running tests
\par}
{\tc\tcl3 \v Running tests}
Run this when the device is connected to network, or if the wireless device is near the access point:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mbed test -n mbed-os-tests-network-*,mbed-os-tests-netsocket*\par
}
\par}
{\bkmkstart AAAAAADQKF}
{\bkmkend AAAAAADQKF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test cases for Socket class
\par}
{\tc\tcl3 \v Test cases for Socket class}
These tests are the same as those for {\b UDPSocket} and {\b TCPSocket}. The {\b Socket} class is abstract, so it cannot be instantiated; therefore, these test cases are implemented using both {\b TCPSocket} and {\b UDPSocket}. Some of these tests are also implemented for the TLSSocket class. In such case, the certificate has to be set for the {\b Socket} before calling {\f2 open()} , unless specified otherwise in the test's description.\par
{\bkmkstart AAAAAADQKG}
{\bkmkend AAAAAADQKG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_OPEN_DESTRUCT
\par}
{\tc\tcl4 \v SOCKET_OPEN_DESTRUCT}
{\b Description:} \par
Call {\f2 Socket::open()} , and then destruct the socket.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the object.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{\b Expected result:} \par
{\f2 Socket::open()}  always returns {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQKH}
{\bkmkend AAAAAADQKH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_OPEN_LIMIT
\par}
{\tc\tcl4 \v SOCKET_OPEN_LIMIT}
{\b Description:} \par
Call {\f2 Socket::open()}  until it runs out of memory or another internal limit in the stack is reached.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until {\f2 NSAPI_ERROR_NO_MEMORY}  or {\f2 NSAPI_ERROR_NO_SOCKET}  error code is returned.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call "delete" for all previously allocated sockets.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat.\par}
\par
{\b Expected result:} \par
It can reserve at least four sockets. After freeing all sockets, it can reserve the same number of sockets.\par}
{\bkmkstart AAAAAADQKI}
{\bkmkend AAAAAADQKI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_OPEN_TWICE
\par}
{\tc\tcl4 \v SOCKET_OPEN_TWICE}
{\b Description:} \par
Call {\f2 Socket::open()}  twice.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 Socket::open()}  first call (socket was not opened) returns {\f2 NSAPI_ERROR_OK}  and nexts calls (socet was opened by previous call Socket::open()) return {\f2 NSAPI_ERROR_PARAMETER} .\par}
{\bkmkstart AAAAAADQKJ}
{\bkmkend AAAAAADQKJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_OPEN_CLOSE_REPEAT
\par}
{\tc\tcl4 \v SOCKET_OPEN_CLOSE_REPEAT}
{\b Description:} \par
Call {\f2 Socket::open()}  followed by {\f2 {\b Socket::close()}}  and then again {\f2 Socket::open()} . Should allows you to reuse the same object.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::close(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::close(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 Socket::open()}  and {\f2 {\b Socket::close()}}  calls return {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQKK}
{\bkmkend AAAAAADQKK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_PORT
\par}
{\tc\tcl4 \v SOCKET_BIND_PORT}
{\b Description:} \par
Call {\f2 Socket::bind(port)} .\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b Socket::bind}(<any unused port number>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All calls return {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQKL}
{\bkmkend AAAAAADQKL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_PORT_FAIL
\par}
{\tc\tcl4 \v SOCKET_BIND_PORT_FAIL}
{\b Description:} \par
Call {\f2 Socket::bind(port)}  on a port number that is already used.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b Socket::bind}(<any unused port number>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat steps 1-3 for a new socket.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy both sockets.\par}
\par
{\b Expected result:} \par
The second {\f2 {\b Socket::bind()}}  returns {\f2 NSAPI_ERROR_PARAMETER} .\par}
{\bkmkstart AAAAAADQKM}
{\bkmkend AAAAAADQKM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_ADDRESS_INVALID
\par}
{\tc\tcl4 \v SOCKET_BIND_ADDRESS_INVALID}
{\b Description:} \par
Call {\f2 Socket::bind(address, port)}  with an address not assigned to you.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Check whether the device is IPv4 or IPv6 connected.{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab For IPv4: Call {\f2 {\b Socket::bind}("190.2.3.4", <any unused port number>);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab For IPv6: Call {\f2 {\b Socket::bind}("fe80::ff01", <any unused port number>);} .\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 {\b Socket::bind()}}  returns {\f2 NSAPI_ERROR_PARAMETER} .\par}
{\bkmkstart AAAAAADQKN}
{\bkmkend AAAAAADQKN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_ADDRESS_WRONG_TYPE
\par}
{\tc\tcl4 \v SOCKET_BIND_ADDRESS_WRONG_TYPE}
{\b Description:} \par
Call {\f2 Socket::bind(SocketAddress)}  with an address that is not the wrong type for the connection.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Check whether the device is IPv4 or IPv6 connected:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
For IPv4: Create {\f2 {\b SocketAddress}("fe80::ff01", <any unused port number>);} .\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
For IPv6: Create {\f2 {\b SocketAddress}("190.2.3.4", <any unused port number>);} .\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::bind(address);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 {\b Socket::bind()}}  returns {\f2 NSAPI_ERROR_PARAMETER} .\par}
{\bkmkstart AAAAAADQKO}
{\bkmkend AAAAAADQKO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_ADDRESS
\par}
{\tc\tcl4 \v SOCKET_BIND_ADDRESS}
{\b Description:} \par
Call {\f2 Socket::bind(SocketAddress)} .\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::open(stack)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Get address by calling {\f2 {\b NetworkInterface::get_ip_address()};} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\b SocketAddress} object using this address and any unused port number.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 Socket::bind(address);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All calls return {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQKP}
{\bkmkend AAAAAADQKP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SOCKET_BIND_UNOPENED
\par}
{\tc\tcl4 \v SOCKET_BIND_UNOPENED}
{\b Description:} \par
Call {\f2 {\b Socket::bind()}}  on a socket that has not been opened.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create an object by calling {\f2 new {\b Socket()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b Socket::bind}(<any unused port number>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 NSAPI_ERROR_NO_SOCKET} \par}
\par}
{\bkmkstart AAAAAADQKQ}
{\bkmkend AAAAAADQKQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test cases for UDPSocket class
\par}
{\tc\tcl3 \v Test cases for UDPSocket class}
{\bkmkstart AAAAAADQKR}
{\bkmkend AAAAAADQKR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_OPEN_DESTRUCT
\par}
{\tc\tcl4 \v UDPSOCKET_OPEN_DESTRUCT}
{\b Description:}  Run {\f2 SOCKET_OPEN_DESTRUCT}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKS}
{\bkmkend AAAAAADQKS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_OPEN_LIMIT
\par}
{\tc\tcl4 \v UDPSOCKET_OPEN_LIMIT}
{\b Description:}  Run {\f2 SOCKET_OPEN_LIMIT}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKT}
{\bkmkend AAAAAADQKT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_OPEN_TWICE
\par}
{\tc\tcl4 \v UDPSOCKET_OPEN_TWICE}
{\b Description:}  Run {\f2 SOCKET_OPEN_TWICE}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKU}
{\bkmkend AAAAAADQKU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_OPEN_CLOSE_REPEAT
\par}
{\tc\tcl4 \v UDPSOCKET_OPEN_CLOSE_REPEAT}
{\b Description:}  Run {\f2 SOCKET_OPEN_CLOSE_REPEAT}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKV}
{\bkmkend AAAAAADQKV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_PORT
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_PORT}
{\b Description:}  Run {\f2 SOCKET_BIND_PORT}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKW}
{\bkmkend AAAAAADQKW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_PORT_FAIL
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_PORT_FAIL}
{\b Description:}  Run {\f2 SOCKET_BIND_PORT_FAIL}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKX}
{\bkmkend AAAAAADQKX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_ADDRESS_INVALID
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_ADDRESS_INVALID}
{\b Description:}  Run {\f2 SOCKET_BIND_ADDRESS_INVALID}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKY}
{\bkmkend AAAAAADQKY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_WRONG_TYPE
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_WRONG_TYPE}
{\b Description:}  Run {\f2 SOCKET_BIND_WRONG_TYPE}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQKZ}
{\bkmkend AAAAAADQKZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_ADDRESS
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_ADDRESS}
{\b Description:}  Run {\f2 SOCKET_BIND_ADDRESS}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQLA}
{\bkmkend AAAAAADQLA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_BIND_UNOPENED
\par}
{\tc\tcl4 \v UDPSOCKET_BIND_UNOPENED}
{\b Description:}  Run {\f2 SOCKET_BIND_UNOPENED}  for {\b UDPSocket}.\par}
{\bkmkstart AAAAAADQLB}
{\bkmkend AAAAAADQLB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_SENDTO_REPEAT
\par}
{\tc\tcl4 \v UDPSOCKET_SENDTO_REPEAT}
{\b Description:} \par
Repeatedly send small packets.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b UDPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 9, "hello", 5);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Fail if {\f2 NSAPI_ERROR_NO_MEMORY}  is returned two times in a row.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait 1 second before retrying.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 sendto()}  calls return 5.\par}
{\bkmkstart AAAAAADQLC}
{\bkmkend AAAAAADQLC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST}
{\b Description:} \par
Repeatedly send packets to echo server and read incoming packets back. Verify different packet sizes work.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b UDPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = loop index>, <loop index>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for incoming packet.{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
If timeout happens, retry sending and receiving a maximum of three times.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as the sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 1,200 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
At least one {\f2 sendto()}  call of every size returns the packet size.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Errors returned from {\f2 recvfrom()}  calls are tolerated.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Calculate packet loss rate. The maximum tolerated packet loss rate is 30%.\par}
\par
\par}
{\bkmkstart AAAAAADQLD}
{\bkmkend AAAAAADQLD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST_NONBLOCK
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST_NONBLOCK}
{\b Description:} \par
Repeatedly send packets to echo server and read incoming packets back. Verify different packet sizes work. Use {\b Socket} in nonblocking mode.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b UDPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 UDPSocket::set_blocking(false)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Register event handler with {\f2 {\b UDPSocket::sigio()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create another thread that constantly waits for a signal from the {\f2 sigio()}  handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When it's received, try {\f2 {\b UDPSocket::recvfrom()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = loop index>, <loop index>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for an incoming packet for one second.{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
If nothing is received, retry a maximum of three times.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 1,200 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
At least one {\f2 sendto()}  call of every size returns the packet size.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Errors returned from {\f2 recvfrom()}  calls are tolerated.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Calculate packet loss rate. The maximum tolerated packet loss rate is 30%.\par}
\par
\par}
{\bkmkstart AAAAAADQLE}
{\bkmkend AAAAAADQLE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST_CONNECT_SEND_RECV
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST_CONNECT_SEND_RECV}
{\b Description:} \par
This test is exactly the same test as UDPSOCKET_ECHOTEST, except instead of using {\f2 sendto()}  and {\f2 recvfrom()}  methods, this uses TCPSocket-like {\f2 connect()} , {\f2 send()}  and {\f2 recv()}  methods.\par}
{\bkmkstart AAAAAADQLF}
{\bkmkend AAAAAADQLF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST_NONBLOCK_CONNECT_SEND_RECV
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST_NONBLOCK_CONNECT_SEND_RECV}
{\b Description:} \par
This test is exactly the same test as UDPSOCKET_ECHOTEST_NONBLOCK_CONNECT_SEND_RECV, except instead of using {\f2 sendto()}  and {\f2 recvfrom()}  methods, this uses TCPSocket-like {\f2 connect()} , {\f2 send()}  and {\f2 recv()}  methods.\par}
{\bkmkstart AAAAAADQLG}
{\bkmkend AAAAAADQLG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_RECV_TIMEOUT
\par}
{\tc\tcl4 \v UDPSOCKET_RECV_TIMEOUT}
{\b Description:} \par
{\b Test} whether timeouts are obeyed in UDPSockets.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 UDPSocket::set_timeout(100)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket::sendto}("echo.mbedcloudtesting.com", 7, <random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat five times.{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Record a time with millisecond precision.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket::recvfrom()}} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Record a time with millisecond precision.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat the test case 10 times.\par}
\par
{\b Expected result:} \par
Each {\f2 sendto()}  call returns 100.\par
Within each loop, one {\f2 recvfrom()}  may return the received packet size (100). Other calls return {\f2 NSAPI_ERROR_WOULD_BLOCK} .\par
When {\f2 NSAPI_ERROR_WOULD_BLOCK}  is received, check that time consumed is more that 100 milliseconds but less than 200 milliseconds.\par}
{\bkmkstart AAAAAADQLH}
{\bkmkend AAAAAADQLH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_SENDTO_TIMEOUT
\par}
{\tc\tcl4 \v UDPSOCKET_SENDTO_TIMEOUT}
{\b Description:} \par
{\b Test} whether timeouts are obeyed in UDPSockets.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Record time.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket::sendto}("echo.mbedcloudtesting.com", 9, <random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Record time.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 UDPSocket::set_timeout(1000)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket::sendto}("echo.mbedcloudtesting.com", 9, <random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Record time.\par}
\par
{\b Expected result:} \par
Each {\f2 sendto()}  call returns 100.\par
All {\f2 sendto()}  calls return faster than 100 milliseconds because UDP sending does not block that long.\par}
\par}
{\bkmkstart AAAAAADQLI}
{\bkmkend AAAAAADQLI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test cases for TCPSocket class
\par}
{\tc\tcl3 \v Test cases for TCPSocket class}
{\bkmkstart AAAAAADQLJ}
{\bkmkend AAAAAADQLJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_OPEN_DESTRUCT
\par}
{\tc\tcl4 \v TCPSOCKET_OPEN_DESTRUCT}
{\b Description:}  Run {\f2 SOCKET_OPEN_DESTRUCT}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLK}
{\bkmkend AAAAAADQLK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_OPEN_LIMIT
\par}
{\tc\tcl4 \v TCPSOCKET_OPEN_LIMIT}
{\b Description:}  Run {\f2 SOCKET_OPEN_LIMIT}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLL}
{\bkmkend AAAAAADQLL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_OPEN_TWICE
\par}
{\tc\tcl4 \v TCPSOCKET_OPEN_TWICE}
{\b Description:}  Run {\f2 SOCKET_OPEN_TWICE}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLM}
{\bkmkend AAAAAADQLM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_OPEN_CLOSE_REPEAT
\par}
{\tc\tcl4 \v TCPSOCKET_OPEN_CLOSE_REPEAT}
{\b Description:}  Run {\f2 SOCKET_OPEN_CLOSE_REPEAT}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLN}
{\bkmkend AAAAAADQLN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_PORT
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_PORT}
{\b Description:}  Run {\f2 SOCKET_BIND_PORT}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLO}
{\bkmkend AAAAAADQLO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_PORT_FAIL
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_PORT_FAIL}
{\b Description:}  Run {\f2 SOCKET_BIND_PORT_FAIL}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLP}
{\bkmkend AAAAAADQLP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_ADDRESS_INVALID
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_ADDRESS_INVALID}
{\b Description:}  Run {\f2 SOCKET_BIND_ADDRESS_INVALID}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLQ}
{\bkmkend AAAAAADQLQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_WRONG_TYPE
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_WRONG_TYPE}
{\b Description:}  Run {\f2 SOCKET_BIND_WRONG_TYPE}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLR}
{\bkmkend AAAAAADQLR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_ADDRESS
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_ADDRESS}
{\b Description:}  Run {\f2 SOCKET_BIND_ADDRESS}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLS}
{\bkmkend AAAAAADQLS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_BIND_UNOPENED
\par}
{\tc\tcl4 \v TCPSOCKET_BIND_UNOPENED}
{\b Description:}  Run {\f2 SOCKET_BIND_UNOPENED}  for {\b TCPSocket}.\par}
{\bkmkstart AAAAAADQLT}
{\bkmkend AAAAAADQLT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_CONNECT_INVALID
\par}
{\tc\tcl4 \v TCPSOCKET_CONNECT_INVALID}
{\b Description:} \par
Call {\f2 {\b TCPSocket::connect()}}  with invalid parameters.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:connect( NULL, 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:connect( "", 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:connect( "", 0);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:connect( "echo.mbedcloudtesting.com", 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 connect()}  calls return an error code except the number 4, which returns {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQLU}
{\bkmkend AAAAAADQLU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_SEND_REPEAT
\par}
{\tc\tcl4 \v TCPSOCKET_SEND_REPEAT}
{\b Description:} \par
Repeatedly send small packets.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}("hello", 5);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 {\b TCPSocket::connect()}}  returns {\f2 NSAPI_ERROR_OK} .\par
All {\f2 send()}  calls return 5.\par}
{\bkmkstart AAAAAADQLV}
{\bkmkend AAAAAADQLV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_ECHOTEST
\par}
{\tc\tcl4 \v TCPSOCKET_ECHOTEST}
{\b Description:} \par
Repeatedly send packets to echo server and read incoming packets back. Verify different packet sizes work.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = loop index>, <size>);} .{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab If less than <loop index> was returned, size = sent bytes.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::recv}(buffer, <size>);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 1,200 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 send()}  calls return the packet size or less. All {\f2 recv()}  calls return the same sized packet that was sent with same content.\par
NOTE: This is stream, so {\f2 recv()}  might return less data than requested. Keep calling {\f2 recv()}  until all data you have sent is returned.\par}
{\bkmkstart AAAAAADQLW}
{\bkmkend AAAAAADQLW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_ECHOTEST_NONBLOCK
\par}
{\tc\tcl4 \v TCPSOCKET_ECHOTEST_NONBLOCK}
{\b Description:} \par
Repeatedly send packets to echo server and read incoming packets back. Verify different packet sizes work. Use {\b Socket} in nonblocking mode.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::set_blocking(false)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Register event handler with {\f2 {\b TCPSocket::sigio()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create another thread that constantly waits for a signal from {\f2 sigio()}  handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When it's received, try {\f2 {\b TCPSocket::recv}(buf+index, <loop index> - index)} , where index is the amount of data already received.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:send(<random packet, size = loop index>, <loop index>);} .{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab If less than <loop index> is returned, try immediately sending the remaining bytes.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab If {\f2 NSAPI_ERROR_WOULD_BLOCK}  is returned, wait for {\f2 sigio()}  call to happen.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for incoming packet for one second.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set index for receiving thread to zero.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 1,200 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 send()}  calls return the packet size or less. All {\f2 recv()}  calls return {\f2 NSAPI_ERROR_WOULD_BLOCK}  or a packet size equal to or less than what has been sent.\par}
{\bkmkstart AAAAAADQLX}
{\bkmkend AAAAAADQLX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_RECV_TIMEOUT
\par}
{\tc\tcl4 \v TCPSOCKET_RECV_TIMEOUT}
{\b Description:} \par
{\b Test} whether timeouts are obeyed in TCPSockets.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::set_timeout(100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 100>;, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 5 times.{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Record a time with millisecond precision.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::recv()}} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Record a time with millisecond precision.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat the test case 10 times.\par}
\par
{\b Expected result:} \par
Each {\f2 send()}  call returns 100.\par
Within each loop, one {\f2 recv()}  may return the received packet size (100). Other calls return {\f2 NSAPI_ERROR_WOULD_BLOCK} .\par
When {\f2 NSAPI_ERROR_WOULD_BLOCK}  is received, check the time consumed is more that 100 milliseconds but less than 200 milliseconds.\par}
{\bkmkstart AAAAAADQLY}
{\bkmkend AAAAAADQLY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_SEND_TIMEOUT
\par}
{\tc\tcl4 \v TCPSOCKET_SEND_TIMEOUT}
{\b Description:} \par
Repeatedly send small packets in a given time limit.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:connect("echo.mbedcloudtesting.com", 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:set_blocking(false);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket}:send("hello", 5);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 10 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 {\b TCPSocket::connect()}}  return {\f2 NSAPI_ERROR_OK} .\par
All {\f2 send()}  calls return in less than 800 milliseconds.\par}
{\bkmkstart AAAAAADQLZ}
{\bkmkend AAAAAADQLZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_ENDPOINT_CLOSE
\par}
{\tc\tcl4 \v TCPSOCKET_ENDPOINT_CLOSE}
{\b Description:} \par
{\b Test} whether you tolerate an endpoint closing the connection.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 13);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::recv}(<buffer>, 30);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until {\f2 recv()}  returns 0.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::close()};} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
Connect returns {\f2 NSAPI_ERROR_OK} .\par
The first {\f2 recv()}  returns datetime string length (It is between 10 and 30 bytes).\par
The second {\f2 recv()}  returns zero because the endpoint closed the connection. {\f2 close()}  returns {\f2 NSAPI_ERROR_OK} .\par}
{\bkmkstart AAAAAADQMA}
{\bkmkend AAAAAADQMA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_SETSOCKOPT_KEEPALIVE_VALID
\par}
{\tc\tcl4 \v TCPSOCKET_SETSOCKOPT_KEEPALIVE_VALID}
{\b Description:} \par
{\b Test} you can request setting valid TCP keepalive values.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::setsockopt(keepalive, [0,1 or 7200]);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 9);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::getsockopt(keepalive);} .\par}
\par
{\b Postconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::close()};} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
{\f2 TCPSocket::getsockopt(keepalive)}  returns the same value as that set with {\f2 {\b TCPSocket::setsockopt()}}  or {\f2 NSAPI_ERROR_UNSUPPORTED} .\par}
\par}
{\bkmkstart AAAAAADQMB}
{\bkmkend AAAAAADQMB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test cases for TLSSocket class
\par}
{\tc\tcl3 \v Test cases for TLSSocket class}
{\bkmkstart AAAAAADQMC}
{\bkmkend AAAAAADQMC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_OPEN_DESTRUCT
\par}
{\tc\tcl4 \v TLSSOCKET_OPEN_DESTRUCT}
{\b Description:}  Run {\f2 SOCKET_OPEN_DESTRUCT}  for TLSSocket.\par}
{\bkmkstart AAAAAADQMD}
{\bkmkend AAAAAADQMD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_OPEN_LIMIT
\par}
{\tc\tcl4 \v TLSSOCKET_OPEN_LIMIT}
{\b Description:}  Run {\f2 SOCKET_OPEN_LIMIT}  for TLSSocket.\par}
{\bkmkstart AAAAAADQME}
{\bkmkend AAAAAADQME}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_OPEN_TWICE
\par}
{\tc\tcl4 \v TLSSOCKET_OPEN_TWICE}
{\b Description:}  Run {\f2 SOCKET_OPEN_TWICE}  for TLSSocket.\par}
{\bkmkstart AAAAAADQMF}
{\bkmkend AAAAAADQMF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_CONNECT_INVALID
\par}
{\tc\tcl4 \v TLSSOCKET_CONNECT_INVALID}
{\b Description:}  Run {\f2 SOCKET_CONNECT_INVALID}  for TLSSocket.\par}
{\bkmkstart AAAAAADQMG}
{\bkmkend AAAAAADQMG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_HANDSHAKE_INVALID
\par}
{\tc\tcl4 \v TLSSOCKET_HANDSHAKE_INVALID}
{\b Description:} \par
Execute the TLS handshake by calling {\f2 TLSSocket::connect()} . The server must not match the certificate used by os.mbed.com.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create TLSSocket.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::open()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("os.mbed.com", 2009)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::close()} .\par}
\par
{\b Expected result:} \par
{\f2 TLSSocket::connect}  must return an error.\par}
{\bkmkstart AAAAAADQMH}
{\bkmkend AAAAAADQMH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_SEND_CLOSED
\par}
{\tc\tcl4 \v TLSSOCKET_SEND_CLOSED}
{\b Description:} \par
Make an HTTP request to a closed socket.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create TLSSocket.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::open()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("echo.mbedcloudtesting.com", 2007)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::close()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::send("12345", 5)} .\par}
\par
{\b Expected result:} \par
{\f2 TLSSocket::send}  must return an error.\par}
{\bkmkstart AAAAAADQMI}
{\bkmkend AAAAAADQMI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_SEND_REPEAT
\par}
{\tc\tcl4 \v TLSSOCKET_SEND_REPEAT}
{\b Description:}  Run {\f2 SOCKET_SEND_REPEAT}  for TLSSOCKET by using port number 2009.\par}
{\bkmkstart AAAAAADQMJ}
{\bkmkend AAAAAADQMJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_SEND_TIMEOUT
\par}
{\tc\tcl4 \v TLSSOCKET_SEND_TIMEOUT}
{\b Description:}  Run {\f2 SOCKET_SEND_TIMEOUT}  for TLSSOCKET by using port number 2009.\par}
{\bkmkstart AAAAAADQMK}
{\bkmkend AAAAAADQMK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_SEND_UNCONNECTED
\par}
{\tc\tcl4 \v TLSSOCKET_SEND_UNCONNECTED}
{\b Description:} \par
Make an HTTP request to an unconnected socket.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create TLSSocket.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::open()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::send("12345", 5)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("echo.mbedcloudtesting.com", 2007)} .\par}
\par
{\b Expected result:} \par
{\f2 TLSSocket::send}  must return an error.\par}
{\bkmkstart AAAAAADQML}
{\bkmkend AAAAAADQML}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_ECHOTEST
\par}
{\tc\tcl4 \v TLSSOCKET_ECHOTEST}
{\b Description:}  Run {\f2 SOCKET_ECHOTEST}  for TLSSOCKET by using port number 2007.\par}
{\bkmkstart AAAAAADQMM}
{\bkmkend AAAAAADQMM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_ECHOTEST_NONBLOCK
\par}
{\tc\tcl4 \v TLSSOCKET_ECHOTEST_NONBLOCK}
{\b Description:}  Run {\f2 SOCKET_ECHOTEST_NONBLOCK}  for TLSSOCKET by using port number 2007.\par}
{\bkmkstart AAAAAADQMN}
{\bkmkend AAAAAADQMN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_ENDPOINT_CLOSE
\par}
{\tc\tcl4 \v TLSSOCKET_ENDPOINT_CLOSE}
{\b Description:}  Run {\f2 SOCKET_ENDPOINT_CLOSE}  for TLSSOCKET by using port number 2013.\par}
{\bkmkstart AAAAAADQMO}
{\bkmkend AAAAAADQMO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_NO_CERT
\par}
{\tc\tcl4 \v TLSSOCKET_NO_CERT}
{\b Description:} \par
Verify TLS {\b Socket} fails to connect without a certificate.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create TLSSocket, without adding a default certificate.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::open()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("echo.mbedcloudtesting.com", 2009)} .\par}
\par
{\b Expected result:} \par
{\f2 TLSSocket::connect}  must return an error if the certificate is not present.\par}
{\bkmkstart AAAAAADQMP}
{\bkmkend AAAAAADQMP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_RECV_TIMEOUT
\par}
{\tc\tcl4 \v TLSSOCKET_RECV_TIMEOUT}
{\b Description:} \par
Run {\f2 TCPSOCKET_RECV_TIMEOUT}  for TLSSOCKET by using port number 2007.\par}
{\bkmkstart AAAAAADQMQ}
{\bkmkend AAAAAADQMQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TLSSOCKET_SIMULTANEOUS_TEST
\par}
{\tc\tcl4 \v TLSSOCKET_SIMULTANEOUS_TEST}
{\b Description:} \par
Simultaneously send packets to echo server on two opened sockets and read incoming packets back. Verify TLS sockets open and operate simultaneously.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab TLSSockets are open and one additional thread has been created.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Both threads get their own socket instance.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (Simultaneously with step 2), on the main thread:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("echo.mbedcloudtesting.com", 2007);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::send(<random packet, size = loop index>, <loop index>);} .{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9642\tab}\ilvl2\ls1 \li0\ri0\lin0\rin0\fi-360\tx1080\li1080\ri0\lin1080\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
If less than <loop index> is returned, size = sent bytes.\par}
}
{
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::recv(buffer, <size>);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (Simultaneously with step 1), on the additional thread:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::connect("echo.mbedcloudtesting.com", 2007);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call \'91TLSSocket::send(<random packet, size = loop index>, <loop index>);\'92.{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9642\tab}\ilvl2\ls1 \li0\ri0\lin0\rin0\fi-360\tx1080\li1080\ri0\lin1080\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
If less than <loop index> is returned, size = sent bytes.\par}
}
{
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TLSSocket::recv(buffer, <size>);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for the additional thread to end.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Close and destroy the sockets.\par}
\par
{\b Expected result:} \par
All {\f2 send()}  calls return the packet size or less. All {\f2 recv()}  calls on the main thread return the same sized packet that was sent with the same content. All {\f2 recv()}  calls on the additional thread return the valid daytime string.\par}
\par}
{\bkmkstart AAAAAADQMR}
{\bkmkend AAAAAADQMR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Performance tests
\par}
{\tc\tcl3 \v Performance tests}
{\bkmkstart AAAAAADQMS}
{\bkmkend AAAAAADQMS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST_BURST
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST_BURST}
{\b Description:} \par
Send a burst of packets to the echo server and read incoming packets back.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b UDPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 200>, 200);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 300>, 300);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 120>, 120);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 500>, 500);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for incoming packets for five seconds.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allow packet reordering.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 sendto()}  calls return the packet size.\par
All {\f2 recvfrom()}  calls return the same sized packet that was sent with same content. Allow packet reordering.\par
Calculate packet loss rate. The maximum tolerated packet loss rate is 30%.\par
The number of successful rounds is higher than 70.\par}
{\bkmkstart AAAAAADQMT}
{\bkmkend AAAAAADQMT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
UDPSOCKET_ECHOTEST_BURST_NONBLOCK
\par}
{\tc\tcl4 \v UDPSOCKET_ECHOTEST_BURST_NONBLOCK}
{\b Description:} \par
Send a burst of packets to the echo server and read incoming packets back. Use {\b Socket} in nonblocking mode.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b UDPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 UDPSocket::set_blocking(false)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Register event handler with {\f2 {\b UDPSocket::sigio()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create another thread that constantly waits signal from sigio() handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When received, try {\f2 {\b UDPSocket::recvfrom()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 200>, 200);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 300>, 300);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 120>, 120);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b UDPSocket}:sendto("echo.mbedcloudtesting.com", 7, <random packet, size = 500>, 500);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for incoming packets for five seconds.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allow packet reordering.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 sendto()}  calls return the packet size.\par
All {\f2 recvfrom()}  calls return the same sized packet that was sent with the same content. Allow packet reordering.\par
Calculate packet loss rate. The maximum tolerated packet loss rate is 30%.\par
The number of successful rounds is higher than 70.\par}
{\bkmkstart AAAAAADQMU}
{\bkmkend AAAAAADQMU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_ECHOTEST_BURST
\par}
{\tc\tcl4 \v TCPSOCKET_ECHOTEST_BURST}
{\b Description:} \par
Send a burst of packets to the echo server and read incoming packets back.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 100>, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 200>, 200);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 300>, 300);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 120>, 120);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::send}(<random packet, size = 500>, 500);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::recv(buf, 1220)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 send()}  calls return the packet size.\par
NOTE: This is stream, so {\f2 recv()}  might return less data than requested. Keep calling {\f2 recv()}  with the remaining size until all data you have sent is returned.\par
Consecutive calls to {\f2 recv()}  return all the data that has been sent. The total amount of returned data must match 1220.\par}
{\bkmkstart AAAAAADQMV}
{\bkmkend AAAAAADQMV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_ECHOTEST_BURST_NONBLOCK
\par}
{\tc\tcl4 \v TCPSOCKET_ECHOTEST_BURST_NONBLOCK}
{\b Description:} \par
Send a burst of packets to the echo server and read incoming packets back. Use {\b Socket} in nonblocking mode.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Register event handler with {\f2 {\b TCPSocket::sigio()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::set_blocking(false)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create another thread that constantly waits for a signal from {\f2 sigio()}  handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When it's received, try {\f2 {\b TCPSocket::recv()}} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab For randomly generated packets sized 100, 200, 300, 120 and 500:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::send(packet, size);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab If less than size is sent, repeat with remaining.\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab If {\f2 NSAPI_ERROR_WOULD_BLOCK}  returned, wait for next {\f2 sigio()} .\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for incoming packets for five seconds.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allow {\f2 recv()}  to return smaller pieces.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat 100 times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the socket.\par}
\par
{\b Expected result:} \par
All {\f2 send()}  calls return {\f2 NSAPI_ERROR_WOULD_BLOCK}  or a size less than or equal to what has been requested.\par
All {\f2 recv()}  calls return a value less than or equal to what has been sent. With consecutive calls, the sizes should match.\par
When {\f2 recv()}  returns {\f2 NSAPI_ERROR_WOULD_BLOCK} , wait for the next {\f2 sigio()}  event. No other error codes are allowed.\par}
{\bkmkstart AAAAAADQMW}
{\bkmkend AAAAAADQMW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_RECV_100K
\par}
{\tc\tcl4 \v TCPSOCKET_RECV_100K}
{\b Description:} \par
Download 100kB of data.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 19);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::recv(buffer, 100);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify input according to a known pattern.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Loop until 100kB of data received.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Close socket.\par}
\par
{\b Expected result:} \par
Each {\f2 recv()}  call returns 100 bytes of data or fewer. No errors are returned.\par
Measure time taken for receiving and report speed.\par}
{\bkmkstart AAAAAADQMX}
{\bkmkend AAAAAADQMX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_RECV_100K_NONBLOCK
\par}
{\tc\tcl4 \v TCPSOCKET_RECV_100K_NONBLOCK}
{\b Description:} \par
Download 100kB of data.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b TCPSocket} is open.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 19);} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::set_blocking(false)} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create another thread that constantly waits for a signal from {\f2 sigio()}  handler.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When it's received, try {\f2 {\b TCPSocket::recv()}} .{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::recv(buffer, 100);} .\par}
{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Verify input according to a known pattern.\par}
}
\par
{
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait until 100kB of data received.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Close socket.\par}
\par
{\b Expected result:} \par
Each {\f2 recv()}  call returns 100 bytes of data or less or {\f2 NSAPI_ERROR_WOULD_BLOCK} , in which case thread waits for another {\f2 sigio()} . No errors are returned.\par
Measure time taken for receiving and report speed.\par}
{\bkmkstart AAAAAADQMY}
{\bkmkend AAAAAADQMY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TCPSOCKET_THREAD_PER_SOCKET_SAFETY
\par}
{\tc\tcl4 \v TCPSOCKET_THREAD_PER_SOCKET_SAFETY}
{\b Description:} \par
Run two threads that both exercise the underlying stack and driver through a dedicated socket.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface and stack are initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Two TCPSockets are open, and one additional thread has been created.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Both threads get their own socket instance.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 {\b TCPSocket::connect}("echo.mbedcloudtesting.com", 7)}  in both threads - in the main thread executing the test case and on the additional one.{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
(Simultaneously with the next step) on the main thread:{
\par
\pard\plain \s142\fi-360\li1080\widctlpar\fs20\cgrid 
1.\tab For randomly generated packets, sized 1001, 901, 801,...,101,1 do{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::send(packet, size);} .\par}
{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Verify incoming content was the same that was sent.\par}
{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Allow {\f2 recv()}  to return smaller pieces.\par}
}
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u9702\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
(Simultaneously with the earlier step) on the additional thread:{
\par
\pard\plain \s142\fi-360\li1080\widctlpar\fs20\cgrid 
1.\tab For randomly generated packets, sized 10:{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Call {\f2 TCPSocket::send(packet, size);} .\par}
{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Verify incoming content is the same as sent content.\par}
{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Allow {\f2 recv()}  to return smaller pieces.\par}
{
\par
\pard\plain \s143\fi-360\li1440\widctlpar\fs20\cgrid 
1.\tab Stop the thread if inconsistencies are found, and report it to main thread.\par}
}
}
}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Kill the additional thread.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Close and destroy the sockets.\par}
\par
{\b Expected result:} \par
The echo server returns data to both threads and received data matches to send data. The additional thread isn't stopped prematurely.\par}
\par}
{\bkmkstart AAAAAADQMZ}
{\bkmkend AAAAAADQMZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test cases for DNS class
\par}
{\tc\tcl3 \v Test cases for DNS class}
{\bkmkstart AAAAAADQNA}
{\bkmkend AAAAAADQNA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS}
{\b Description:} \par
Verify the basic functionality of asynchronous {\b DNS}. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  with a valid host name, and verify the result.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  with a valid host name and a callback.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters.\par}
\par
{\b Expected result:} \par
{\b Callback} is called with {\f2 NSAPI_ERROR_OK}  and IP address.\par}
{\bkmkstart AAAAAADQNB}
{\bkmkend AAAAAADQNB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_SIMULTANEOUS
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_SIMULTANEOUS}
{\b Description:} \par
Verify simultaneous asynchronous {\b DNS} queries work correctly. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  6 times with different host names. Wait for all requests to complete, and verify the result. The cache does not contain host names used in asynchronous request.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  6 times with different host names. Host names are not found from the cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the last {\f2 gethostbyname_async()}  operation is rejected because there is room only for five simultaneous operations.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters five times.\par}
\par
{\b Expected result:} \par
The sixth {\f2 gethostbyname_async()}  is rejected. {\b Callback} is called with {\f2 NSAPI_ERROR_OK}  and IP address five times.\par}
{\bkmkstart AAAAAADQNC}
{\bkmkend AAAAAADQNC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_SIMULTANEOUS_CACHE
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_SIMULTANEOUS_CACHE}
{\b Description:} \par
Verify the caching of {\b DNS} results works correctly with simultaneous asynchronous {\b DNS} queries. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  six times with different host names. Wait for all requests to complete, and verify the result. The cache contains at least one host name used in asynchronous request. You can achieve this, for example, by running the "Asynchronous DNS simultaneous" test before this test and using the same host names in this run.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  six times with different host names. At least one host name is found from cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify that callback is called with correct parameters six times.\par}
\par
{\b Expected result:} \par
{\b Callback} is called with {\f2 NSAPI_ERROR_OK}  and IP address six times.\par}
{\bkmkstart AAAAAADQND}
{\bkmkend AAAAAADQND}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_CACHE
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_CACHE}
{\b Description:} \par
Verify the caching of {\b DNS} results works correctly. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  five times with the same host name and verify the result after each request. For the first request, the cache does not contain the host name. Verify the first request completes more slowly than the requests made after it (where the response is found from cache).\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  with a host name. For the first request, the host name is not found from cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat the sequence four times using the same host name.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab For each request, calculate how long it takes for the {\b DNS} query to complete.\par}
\par
{\b Expected result:} \par
The callback is called with {\f2 NSAPI_ERROR_OK}  and IP address five times. The first request is complete before the requests made after it (where the response is found from cache).\par}
{\bkmkstart AAAAAADQNE}
{\bkmkend AAAAAADQNE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_NON_ASYNC_AND_ASYNC
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_NON_ASYNC_AND_ASYNC}
{\b Description:} \par
Verify synchronous (in other words, blocking) {\b DNS} queries and asynchronous (in other words, nonblocking) queries work at the same time. Call {\f2 {\b NetworkInterface::gethostbyname_async()}} . Right after that, make six synchronous {\f2 {\b NetworkInterface::gethostbyname()}}  calls with different host names.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  with a host name. The host name is not found from cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname()}  six times with different host names (none of the names are the same as that in step 1).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify each {\f2 gethostbyname()}  returns success.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the asynchronous callback is called with correct parameters.\par}
\par
{\b Expected result:} \par
All operations return {\f2 NSAPI_ERROR_OK}  and IP address.\par}
{\bkmkstart AAAAAADQNF}
{\bkmkend AAAAAADQNF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_CANCEL
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_CANCEL}
{\b Description:} \par
Verify the asynchronous {\b DNS} query cancel works correctly. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  six times with different host names. The cache contains three host names used in requests. You can achieve this, for example, by running the "Asynchronous DNS synchronous and asynchronous" test before this test and using the same host names in this run. For each request that was given an unique ID, call cancel. Verify the callback is not called for canceled requests.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  six times with different host names. The cache contains a maximum of three host names used in requests.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async_cancel()}  for each request that was given an unique ID.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify that for canceled requests, callback is not called.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify that for other requests, callback is called.\par}
\par
{\b Expected result:} \par
{\b Callback} is called only for requests that were not canceled.\par}
{\bkmkstart AAAAAADQNG}
{\bkmkend AAAAAADQNG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_EXTERNAL_EVENT_QUEUE
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_EXTERNAL_EVENT_QUEUE}
{\b Description:} \par
Verify that providing an external event queue works correctly. Define a thread and an event queue running on it. Define a {\b DNS} call in callback function that uses the event queue (call_in_callback_cb_t). Enable external event queue. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  six times with different host names.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Define a thread and an event queue running on it.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Define a {\b DNS} call in a callback function that uses the event queue (call_in_callback_cb_t).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Start thread and event queue.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set {\b DNS} callback function using the {\f2 nsapi_dns_call_in_set()}  call.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  six times with different host names. The host names are not found from cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the last {\f2 gethostbyname_async()}  operation is rejected because there is room only for five simultaneous operations.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters five times.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restore the default {\b DNS} callback function using the {\f2 nsapi_dns_call_in_set()}  call.\par}
\par
{\b Expected result:} \par
The sixth {\f2 gethostbyname_async()}  is rejected. {\b Callback} is called with {\f2 NSAPI_ERROR_OK}  and IP address five times.\par}
{\bkmkstart AAAAAADQNH}
{\bkmkend AAAAAADQNH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_INVALID_HOST
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_INVALID_HOST}
{\b Description:} \par
Verify the {\b DNS} failure error is provided for invalid hosts. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  six times with different host names. The first, third and fifth host names are invalid.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  six times with different host names. Host names are not found from cache. The first, third and fifth host names are invalid.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the last {\f2 gethostbyname_async()}  operation is rejected because there is room only for five simultaneous operations.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters five times.\par}
\par
{\b Expected result:} \par
The sixth {\f2 gethostbyname_async()}  is rejected. {\b Callback} is called with {\f2 NSAPI_ERROR_DNS_FAILURE}  for the first, third and fifth host names. {\b Callback} is called with {\f2 NSAPI_ERROR_OK}  and IP address for the second and fourth host names.\par}
{\bkmkstart AAAAAADQNI}
{\bkmkend AAAAAADQNI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_TIMEOUTS
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_TIMEOUTS}
{\b Description:} \par
{\b Test} {\b DNS} timeouts using an external event queue that is modified to time out the events faster than the standard event queue. In this test, the event queue does not delay events; instead, it handles those immediately. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  six times with different host names. All or some of the request time out, and the timeout return value is returned.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Define a thread and an event queue running on it.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Define a {\b DNS} call in callback function that uses the event queue (call_in_callback_cb_t). The callback function does not delay callbacks; instead it handles those immediately.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Start thread and event queue.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set {\b DNS} callback function using the {\f2 nsapi_dns_call_in_set()}  call.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  six times with a different host names. Host names are not found from cache.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the last {\f2 gethostbyname_async()}  operation is rejected because there is room only for five simultaneous operations.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters five times.\par}
\par
{\b Expected result:} \par
The sixth {\f2 gethostbyname_async()}  is rejected. At least for one operation, the callback is called with the {\f2 NSAPI_ERROR_TIMEOUT}  value.\par}
{\bkmkstart AAAAAADQNJ}
{\bkmkend AAAAAADQNJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ASYNCHRONOUS_DNS_SIMULTANEOUS_REPEAT
\par}
{\tc\tcl4 \v ASYNCHRONOUS_DNS_SIMULTANEOUS_REPEAT}
{\b Description:} \par
Verify the simultaneous asynchronous {\b DNS} queries work correctly when repeated in sequence. Call {\f2 {\b NetworkInterface::gethostbyname_async()}}  five times with different host names. Wait for all requests to complete, and verify the result. Repeat the procedure 100 times.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname_async()}  five times with different host names, providing a callback to be called when the operation completes.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the callback is called with correct parameters five times for the first operation.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat steps 1-2 100 times.\par}
\par
{\b Expected result:} \par
A callback, registered for {\f2 gethostbyname_async()} , is called with {\f2 NSAPI_ERROR_OK}  and an IP address five times for every one of 100 repetitions of the test.\par}
{\bkmkstart AAAAAADQNK}
{\bkmkend AAAAAADQNK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SYNCHRONOUS_DNS
\par}
{\tc\tcl4 \v SYNCHRONOUS_DNS}
{\b Description:} \par
Verify the basic functionality of synchronous {\b DNS}. Call {\f2 {\b NetworkInterface::gethostbyname()}}  with a valid host name, and verify the result.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname()}  with a valid host name.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the address was resolved and the return value was valid.\par}
\par
{\b Expected result:} \par
Return value is {\f2 NSAPI_ERROR_OK}  and IP address is obtained from the function call.\par}
{\bkmkstart AAAAAADQNL}
{\bkmkend AAAAAADQNL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SYNCHRONOUS_DNS_MULTIPLE
\par}
{\tc\tcl4 \v SYNCHRONOUS_DNS_MULTIPLE}
{\b Description:} \par
Verify the basic functionality of synchronous {\b DNS}. Call {\f2 {\b NetworkInterface::gethostbyname()}}  with a list of six host names, and verify the result.\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname()}  with a list of six host names.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify each of the addresses was resolved and the return value was valid.\par}
\par
{\b Expected result:} \par
Return value is {\f2 NSAPI_ERROR_OK}  and IP addresses are obtained from the function call.\par}
{\bkmkstart AAAAAADQNM}
{\bkmkend AAAAAADQNM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SYNCHRONOUS_DNS_CACHE
\par}
{\tc\tcl4 \v SYNCHRONOUS_DNS_CACHE}
{\b Description:} \par
Verify the caching of {\b DNS} results works correctly. Call {\f2 {\b NetworkInterface::gethostbyname()}}  five times with the same host name, and verify the result after each request. For the first request, the cache does not contain the host name. Verify the first request completes before the requests made after it (where the response is found from cache).\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname()}  with a host name. For the first request, the host name is not found in cache, and an error is returned.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the address was resolved and the return value was valid.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat the sequence four times using the same host name.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab For each request, calculate how long it takes the {\b DNS} query to complete.\par}
\par
{\b Expected result:} \par
The return value is {\f2 NSAPI_ERROR_OK} , and the IP address is obtained from the function call five times. The first request completes before the requests made after it (where the response is found from cache).\par}
{\bkmkstart AAAAAADQNN}
{\bkmkend AAAAAADQNN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SYNCHRONOUS_DNS_INVALID_HOST
\par}
{\tc\tcl4 \v SYNCHRONOUS_DNS_INVALID_HOST}
{\b Description:} \par
Verify the {\b DNS} failure error is provided for invalid hosts. Call {\f2 {\b NetworkInterface::gethostbyname()}}  six times with different host names. The first, third and fifth host names are invalid (for example by adding an incorrect suffix, such as "google.com_invalid").\par
{\b Preconditions:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network interface is initialized.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Network connection is up.\par}
\par
{\b {\b Test} steps:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Call {\f2 gethostbyname()}  six times with different host names. Host names are not found from cache. The first, third and fifth host names are invalid.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Verify the return value was valid and for valid hostnames the address was resolved six times.\par}
\par
{\b Expected result:} \par
The return value is {\f2 NSAPI_ERROR_DNS_FAILURE}  for the first, third and fifth host names, which were invalidated at the beginning of the test. The return value is {\f2 NSAPI_ERROR_OK} , and the IP address is obtained for the second and fourth host names, which were valid.\par}
\par}
{\bkmkstart AAAAAADQNO}
{\bkmkend AAAAAADQNO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Subset for driver test
\par}
{\tc\tcl3 \v Subset for driver test}
{\bkmkstart AAAAAADQNP}
{\bkmkend AAAAAADQNP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
For physical layer driver (emac, PPP):
\par}
{\tc\tcl4 \v For physical layer driver (emac, PPP):}
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_ECHOTEST.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_ECHOTEST_BURST.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_ECHOTEST_BURST_NONBLOCK.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_ECHOTEST_NONBLOCK.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_RECV_100K.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_RECV_100K_NONBLOCK.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_RECV_TIMEOUT.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
TCPSOCKET_SEND_REPEAT.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_BIND_SENDTO.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_ECHOTEST.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_ECHOTEST_NONBLOCK.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_RECV_TIMEOUT.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_SENDTO_INVALID.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_SENDTO_REPEAT.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
UDPSOCKET_SENDTO_TIMEOUT.\par}
\par
\par}
{\bkmkstart AAAAAADQNQ}
{\bkmkend AAAAAADQNQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
For socket layer driver (AT-driven, external IP stack):
\par}
{\tc\tcl4 \v For socket layer driver (AT-driven, external IP stack):}
All {\b Socket}, {\b UDPSocket}, {\b TCPSocket} and TLSSocket test cases. \par}
\par}
}}